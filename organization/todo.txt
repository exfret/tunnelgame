33. Use config file to name game and state globals
32. For implementing UI, do purely text based commands with passed in print/display functions
31. Write exploration story
30. More complicated parsing system; add metadata into game itself and use this to make saving/loading more robust
29. Basic saving/loading functionality
28. Attach function handlers during parsing
27. Debug commands for messing with the state in all sorts of ways
26. Cost checking with passed args
24. Allow accessing _args out of bound in a more user-friendly manner
23. Basic GUI layout
22. Update 'help' string for new commands (#1 - 5/22/2024)
21. Setting for showing non-taken choices
20. Player-defined macros
19. Repeat command to do something many times
18. Autocomplete
15. Show off subroutine capabilities with time advancing subroutine
14. Implement gosub
13. Allow specification file for author-defined commands
12. If a variable doesn't exist, still instantiate it, but give a warning.
10. Allow loading of other specification files with things like variables and layouts
9. More specific error parsing messages
8. Add variable sensing elsewhere, like costs
7. I think I used 'int' where I should have used 'double' or something such. Fix this.
6. Blocks can be lists now (replacement for _content)
4. Catch exceptions from eval, for things like if statements assume falseness, for set statements don't modify
3. No keyword needed to do choices, just type them
2. Unify actions and choices with actions as just "default choices"

DONE
25. randint import as randint
17. Require tag for choices
16. Highlight for new choices
11. Basic implementation of compound/multi-word choices w/ args
5. Make automatic syntax checking from YAML file
1. Checking that story is formatted correctly