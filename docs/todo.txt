Currently:
  - Big refactor to class-based approach
      - Create new classes
      - Make initial Flask declaration outside View
      - Local emit rooms
      - Pass through chatGPT
    - Refactor state into a class?
    - Make View class not depend on Game or State? (pass in information as needed)
    - Unit tests for addressing and such
    - Add new tests
    - Removed unused instructions
    - Reorganize imports
    - Clean up story loading
    - Clean up project directory organization
    - Store uid with view rather than having to pass it in (each user gets their own view anyways)
    - Make view's web_state just a web_state rather than dictionary of uid to web_state (we already have the dictionary in the __main__ layer)


  - Make requirements not met different color? Maybe bolded and red yeah
  - Implementing view print messages
  - Organize and go through "Old Currently"
  - Encyclopedia
  - Styled text for UI

Old Currently:
  - Connection instruction for moving between locations
  - Block location/locales
  - "check" tag for choices that activates at the same time as require and has custom message for what was missing

  - Game objects
    - Test for duplicate objects

  - Refresh persistence for web view
    - Need to save text and print saved text
  - Restricting possible values? (just finished parsing, need to check that starting value is possible)

  - Block moving
    - New way to check for whether address id's work
    - except tags with handling content for instructions that can raise errors
    - Getting block metadata by id
    - Deal with cyclic moves
  - Migration function!
  - Plenty of tests
  - References to blocks so they can be in multiple spots at the same time?
  
  - Get rid of passing game and state everywhere
  - Working on expanding lemeny version
    - Note: allow exec'ing a given file
    - "Try" statements on run?
    - Allow story to be given that's exec'd (have to test for story's existence)
    - Undo storypoint modifications (since they're not named like they should be...)

Big Todo:
  - UI


230. Apparently, __builtins__ is a module on some platforms, leading to an error in gameparser.py, fix!
229. Make f-strings in view.py less complex?
228. Add thread-safety to state (or maybe just state["command_buffer"])
227. Common View functions for getting what to print about the settings based off state
226. Make a skeleton-creator tool for moving around, actions allowed in each room
225. Figure out solution to config.game and config.state needing to be user-dependent
224. Make save/loads user dependent as well (or at least have that as an option)
223. Styled text
222. More flexible new values for reveal command (maybe also rename to set_hidden)
221. Inventory items that are programmed to always show up, but only when you have at least one of them (good for some things like torches)
220. Ability to display "Energy/Max Energy" instead of having them on separate lines
219. Check that images exist on story load
218. Restructure project to more standard guidelines
217. A function for the whole process that web view needs to go through for print_displayed_text so that I don't have so much duplicate code
216. Autofocus on command prompt upon pressing tab
215. Add colors correctly for web view
214. Force plural localization for showing var values on right, and also base singular/plural for var modifications correctly on increase/decrease/set not actual value
213. Use variable name as default default locale
212. Consider making _shown a dict rather than a list (the var names have to be unique anyways) (same with vars perhaps)
211. Finish text printing methods for web view
210. Make "show" compatible with "to" show statements
209. Get rid of redundant code in view.py
208. Search through any important TODO's throughout the code
207. Clean up stories
206. Consolidate load game code for web view stuff
205. Make image paths work for packaged version
204. Make image paths work for windows
203. Proper clear command in gameloop for web view
202. Tests for each instruction
201. Save clientside info, like dropdown state, on refreshes
200. Print displayed text in web view on reload
199. Fix that choices can't have "flag" as an ID (maybe other restrictions are there too)
198. Actually implement selection options for choice args
197. A reprint command for printing the relevant stats again
196. Make vars display for WebView with dropdown lists recursive
194. Block-based visits var
193. Mapping tool to compile to yaml
192. Maybe keep track of a primary block/location which doesn't include the headers?
191. Make headers not affect choice effects? Choices in headers also borked, maybe effects with named blocks should be different, and relative to header not good
190. Check if _addr makes sure we go to block with _content or is list and is also a block!
189. Shortcuts for moving around
188. Printing of relevant variables (such as coin amounts in shops)
187. Add _content tags at parse time (before story construction) so that all blocks are dicts
186. dont_save_print implemented for gameloop print statements, like settings
185. Locations you can name and fast travel to
184. Have up keys actually input last command
183. Formatted blocks of text with print statement (with no line breaks in between)
182. Remove stupid fstrings
181. Ability to just press enter to go to next part
180. Require for booleans
179. Have inject go into future choices too
177. Templates with parameters?
176. Inject into more things, to prevent copying text a lot
175. More explicit "modify" instruction with more checks than I could do with "set" expressions
172. Keep track of block permutations with block moving
171. State settings for config constant changes like max_macro_depth
170. Ponder custom editor UI (maybe I can move to a more graph-like block structure then)
169. Think about whether to do inform-like interrupts (could also have interrupts on certain choices, or choices with certain tags, etc.)
168. Ability to play as multiple people at once
166. Connectivity tester that tests if there are gotos from a block to every other block in the story or at least specified blocks
165. Test on windows computer
164. Warnings at parse time for possibly unintended things
163. Move eval conditional to utility from interpreter
162. Catch exceptions for any errors from expressions
161. Think about whether to do type checking in expressions
160. An interrupt for repeat/input commands when they're taking too long
158. Named storypoints
157. Goto commands don't seem to be resetting the address
156. Label commands that can be goto'd rather than needed whole new blocks
155. Tags for keeping track of people/places/things etc.
154. Todo instruction and other marker instructions
153. Revisit packaging and where stories can be saved
152. Allow saving game/state on stack when recursively calling run (currently this isn't saved), or at least save it before run is called
151. Make autosaves compatible with re-calling "run"
150. Make sure game and state are the only things that can be changed in the run function, or at least that other things are properly saved and loaded
149. Double check eval is done safely
148. Figure out why meta_story isn't working (typing in content choice then displays nothing)
147. Make choice command for making a choice that's overriden by a standard command? Renaming commands even perhaps?
146. Idea: Headers that always activate when moving into a block, but are tied to that specific block and don't propagate.
145. Allow int argument with revert command for amount to revert
144. Pause ability on input/repeat commands when a new option is presented or new text happens (make it an option that can be disabled but is on by default)
143. Repeat until command that repeats until a condition is met, like not being able to do more commands
142. Check if commands inputted have extraneous arguments (maybe also a more general schema for defining commands)
141. Update help command
140. Check if collect_vars with non-block addresses works
138. Redo GUI so that autocomplete is more possible
137. Consider whether to make game and state into classes
136. Rename print in View back to normal (I don't like overriding it)
135. Remove old commands like flavor, once, and gosub
134. Fix back command... it went back to the root of the story once?
133. Definitely do search along for blocks with certain names (maybe option to disable)
132. Warning for choice/effects without gotos
131. Persistent stats about a story, like how much completion you've achieved across all your runs of it
130. Composite repo logic that looks in both built-in and non-built-in stories
129. Print error for too many args in commands?
128. Test for stop commands
127. Compound instructions (separated by ;?)
126. Fix goto command (I think broken in choice effects)
125. Warnings for = in text (for set statements)
124. Var printing in text of choices?
123. Test dereferencing abilities
122. Ability to name vars based on the current block?
121. Change gosub to persist through choices
120. Create/Global keyword for locally defined vars
119. Give inform a look for object features
118. "all the eggs" talks about all eggs
117. Warning for choices that lead to "todo" sections
116. Special ways to access variables, for example, from different scopes with custom parsing of variables in {} curly braces
115. Tag/filter system... filter only for blocks with a certain tag when doing instructions/commands
114. Make list of definitive features to test
113. Ability to organize vars more into "blocks" that are just for organizational purposes
112. Tags about story elements for debugging? What would these do? Maybe built-in changelogs and messages
111. Make random number generator deterministic
109. Attach which game "id" each save is from
108. Overwrite confirmation for saving over an old file?
107. Default load value too?
106. State organization overhaul?
105. Exception handling when load tries to load something from a different story
104. Implement pytest test cases for shops
103. Catch exceptions from run command
102. Colored title text for intro
101. Print unlock function
100. Going back with story re-running
99. Make headers/footers proper blocks too
98. Execute command for executing instructions from command console (more flexibility with changing state, etc.)
96. Local flags
95. "Disable-able" choices
94. Make _footer's back into distinguished blocks not macros (or maybe a special type of block)
92. Info tag for instructions when you're in a block/reminders (maybe combine with actions)
91. Add footers to effects sections too (maybe move back to ending footers)
90. Titles for locations
89. Fix gameparser for requirement specifications
88. Make sure "help" string is up to date
87. Change "stop" to "wait" statement? Maybe "pause". Make wait keep execution stack and stop get rid of it. How to do headers?
81. Error on choices in story that are more than one word
80. Iteration loops (iterate through a list and do something for each thing in the list)

DONE
174. "seed" command that forces the next few "random" values to prechosen values (doesn't actually seed generator)
77. _args overhaul to use list of variable dicts, not just numbers
70. Plural/gender/etc. localizations for variables (just plural/singular though for now, but more can easily be added later)
58. SPILL instruction for when we do want to "spill" from an effects section to the parent area
195. Vars display for WebView with dropdown lists
167. Investigate that headers seem to be running after everything else
173. An "all" tag for injecting into choices
69. Override variable subscripting, turning variables into special dicts before being passed to eval
159. Test speed of program (the printing is just slow in VSCode unfortunately)
65. Special addressing for the "root" block of a *file* rather than of the whole story
97. Separator instruction
73. Test for substrings of commands and if it applies do those
85. Use python ast module to check for undefined variables
59. Save current input text printed to console when file saved
45. Better interaction with _args (with enforce tags)
61. Return command for gosub
20. Player-defined macros via command line
139. Info command, with ability to inspect all vars in current scope
86. Implement unflagging
83. Use _default in switch statements
78. Treat footers more like macros that get executed within the blocks (Note: I'm reverting this but it was done)
110. Revert command
71. Re-implement "actions", which are always available choices not presented, but can be analyzed by typing "actions" (they also apply to all sub-blocks, like a footer)
42. Interrupts when commands take too long
36. Autosaves
19. Repeat command to do something many times
15. Show off subroutine capabilities with time advancing subroutine
7. Allow float vars with costs and such
72. Flag command that raises a new boolean var
62. Master _requirement_specification parsing function
60. What to do about vars that change after costs are evaluated? (Figured this out, costs are now evaluated on choice presentation)
54. Keep track of last instruction address for debug purposes in the gameloop
52. Check that grammar disjuncts aren't ambiguous
51. Figure out how to deal with array-valued types
44. Location tracking/where playing "is" between choices
33. Use config file to name game and state globals
31. Write exploration story
27. Debug commands for setting variable values
24. Allow accessing _args out of bound in a more user-friendly manner
23. Basic GUI layout
22. Update 'help' string for new commands (#1 - 5/22/2024)
84. Fix eval not actually evaluating whether all variables in an expression exist
4. Catch exceptions from eval, for things like if statements assume falseness, for set statements don't modify
82. Fix goto . instruction
66. Remove list block/dict block distinction
50. Finish view class implementation for command line
39. Make _content a root type
38. Local _vars on top of blocks
34. Start user guide
9. More specific error parsing messages
14. Implement gosub
29. Basic saving/loading functionality
25. randint import as randint
17. Require tag for choices
16. Highlight for new choices
11. Basic implementation of compound/multi-word choices w/ args
6. Blocks can be lists now (replacement for _content)
5. Make automatic syntax checking from YAML file
3. No keyword needed to do choices, just type them
1. Checking that story is formatted correctly

NOT DOING
74. Write a story that allows the reader to write their own story, just for the meta-ness nerd cred (the call command is probably hopelessly broken now, not to mention basically useless, and fixing it scares me)
68. World object that exists separately for each block (or even just a macro) (need to rethink world objects)
63. Check that insert commands and such are only used with bags (starting to rethink bags)
178. Don't save text from actions (already have a way to specify not to save text now with a certain _meta tag)
56. Disallow random intervals in choice specs (maybe once I get warnings, then it can just be a warning)
46. Temp variables that are temporary/only relevant within a block, then they're not set anymore/block variables
26. Cost checking with passed args (can be done with enforced conditions now)
47. no_flavor alternative text
41. Pausing on repeat commands when, for example, you no longer have the materials for something, so it doesn't just spam console (maybe also a "max" option)
21. Setting for showing non-taken choices or not
18. Autocomplete for commands
64. Check "extra newline" with consecutive print statements
12. If a variable doesn't exist, still instantiate it, but give a warning
76. Change _vars to dict
55. Remove underscores and use protected keywords instead
49. Introduce type annotations (learn them)
48. Recursive searching for block names if there's a unique block with that name or closest one
35. Write a semantics spec (once I get syntax more nailed down) (replaced by user guide)
28. Attach function handlers during parsing
10. Allow loading of other specification files with things like variables and layouts
79. Use Black formatter?
2. Unify actions and choices with actions as just "default choices"

I FORGET WHAT THIS MEANS
43. Automatic log of variable changes
67. Actually write the tests
13. Allow specification file for author-defined commands
53. Automatic checking for interpreter functions
30. More complicated parsing system; add metadata into game itself and use this to make saving/loading more robust
40. Search command to search for a place
32. For implementing UI, do purely text based commands with passed in print/display functions
57. Automatic stopping outside of effects blocks!

DEFUNCT
75. Should "stops" deconstruct the call stack like they do now? In general, how could we do choices within a gosub? (I ended up using sub commands instead, so I think I ended up resolving this in a different way)
37. Add special lib var that is a library accessible to expressions but doesn't get saved with the state
8. Add back in variable sensing?