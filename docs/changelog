2024/7/4
- Added injection instruction, which adds instructions to matching choices
- Added histories and revert command
- Added selectable_once tag for choices (makes it so choice can only be run once)
- Added interrupts when too many instructions are run before the next choice (currently at 10000)
- Fixed misuse of glob where rglob was correct in test_stories
- Added pytest "shop" test
- Fixed bug with print in view.py not converting to string before appending to displayed_text

2024/7/3
- Saving retains text in console/default view
- Added autosaves (just once each choice for now)
- Added repeat command

2024/7/2
- Added pytest test case for float vars
- Added ability for vars to be floats (I think?)
- Added choice parsing logic to gameloop as well since it was needed there, also moved some of it out of view

2024/6/30
- Interpreter instructions can now run gameloop commands; attempted the reverse direction, but that seems to be a bit more difficult
- Added input command for inputting several commands at a time
- Fixed missing conversion of yaml dump to utf-8 before write-bytes
- Added "logical capabilities" section to user guide with a subsection on subroutines
- Custom error handling for null blocks
- Wrote a lot of tunnel story in new language (mostly intro stuff)

2024/6/28
- Added separator instruction
- Added actions (choices that don't remove the other choices)
- Work toward merge with Max changes to packaging and such
- Pytest test case for example stories (just make sure they parse)
- Got simple_bags test working again

2024/6/27
- Worked on exploration story (v3)

2024/6/26
- Made footers macros instead of separate content sections
- Used python ast module for finding missing var references

2024/6/25
- Added set command for changing var values at runtime for testing

2024/6/24
- Moved requirement spec display logic to view

2024/6/23
- Fixed that require tags in choice instructions would crash the interpreter
- Wrote some of the exploration basic 2 story for testing out the language

2024/6/22
- Added ability to run a story within a story
- Added call statements that allow for a stack of variables, returns for call statements, and global variables that are persistent through calls

2024/6/21
- Added flag command
- Added _num_choices special var
- Added stop instruction
- The "goto" command is now relative to where the user is in the story
- Wrote three new sections of user manual
- Modified behavior of back to be more intuitive
- Dict blocks now also search for sibling blocks with the same name in local addressing (not just list blocks)
- Worked on new variable dict types

2024/6/19
- Implemented testing for basic syntax
- More specific parsing error messages

2024/6/18
- Big work on testing functionalities!
- Moved terminal clearing to view
- Moved source code to src file
- Fixed bug with address . not going to parent block in list blocks
- Fixed bug after variable refactoring that caused "set" command to not work at all

2024/6/17
- Added file stitching
- Finished first section of user guide, "Getting Started", and started second section on "Organizational Concepts"

2024/6/16
- Moved some addressing functionality from interpreter into the addressing module
- Fixed bug with the way I thought local addressing worked causing some example stories to not compile
- Added "back" command, which returns to the innermost block that the program executed an INSTRUCTION node within during the *previous* stepping
- Fixed error with new variable checking that didn't allow locales
- Allowed bag functionality in "costs" (still need to implement for other requirement_spec)

2024/6/15
- Fixed bug where "set" command would cause crash on parsing with expressions that just set values rather than adding or subtracting them
- Started moving print commands from interpreter to view

2024/6/14
- Fixed bug involving loading the state object in gameloop disconnecting the reference from the state object in other files
- Moved all print statements from gameloop to a view object

2024/6/12
- Implemented changelog
